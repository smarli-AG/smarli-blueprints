# TODO: potential improvements:
# - Ability to track multiple weather entities
#   (change to multiple true, write all forecasts into a list and check if any of the tracked wheather events are in that list.
#   How do we handle different weather events from different entities, that are all in the list? Maybe with a main entity?)
#   => Likely makes things unnecessarily complicated
# - Differentiate notify action between Android and iOS
#   see for example this approach https://github.com/samuelthng/t-house-blueprints/blob/main/notifications.yaml
#   uses has an approach to check the platform of the device. maybe this can be integrated as well
#   -> get all devices, check their manufacturer or os and then put them in different lists. then send different
#   notifications to iOS and android. maybe similar to this repeat function: https://gist.github.com/milperks/3a2cce4805735ebcadab701162257139
# - Language support by creating dictionaries with non-editable texts and tying them into the language entity

blueprint:
  ############
  # Metadata #
  ############
  name: smarli. Weather Warning
  description: >
    # üå©Ô∏è smarli. Weather Warning


    This automation will warn users about upcoming weather events so that they can leave their homes fully prepared.

    *Version 1.3.0 | 2025-05-07*

    <details>
    <summary><b>How to set it up</b></summary>

      1. Select at what time the notification should be sent - this is the trigger

      2. Select the weather entity that should be watched

      3. Select which weather conditions you'd like to be informed about

      4. Select if you'd like to inform all notification devices or just specific companion apps.

      5. If you like, update the texts that will be sent with the notification

      6. Add additional triggers, conditions, or actions manually - this is for experienced users only.
    </details>


    All input fields are required unless they are marked as ` (optional) `.
  domain: automation
  author: loocd [smarli. AG]
  source_url: https://github.com/smarli-AG/smarli-blueprints/blob/main/automation/weatherWarning.yaml
  homeassistant:
    min_version: 2024.11.3

  ###############
  # User Inputs #
  ###############
  input:
    trigger_inputs:
      name: Trigger Inputs
      icon: mdi:star-box-multiple
      description: These inputs are used to set the automation triggers
      input:
        trigger_time:
          name: Time of notification
          description: The time to send the notification
          selector:
            time:
          default: "06:30:00"

    condition_inputs:
      name: Condition Inputs
      icon: mdi:help-box-multiple
      description: These inputs are used to set the automation conditions
      input:
        weather_entity:
          name: Weather Entity
          description: The weather entity to check
          selector:
            entity:
              filter:
                domain: weather
        weather_events:
          name: Weather Events
          description: Which predicted weather events should trigger a notification?
          selector:
            select:
              options:
                - label: Rainy
                  value: "rainy"
                - label: Pouring
                  value: "pouring"
                - label: Lightning
                  value: "lightning"
                - label: Lightning, rainy
                  value: "lightning-rainy"
                - label: Hail
                  value: "hail"
                - label: Snowy
                  value: "snowy"
                - label: Snowy, rainy
                  value: "snowy-rainy"
                - label: Fog
                  value: "fog"
              multiple: true
              mode: list

    action_inputs:
      name: Action Inputs
      icon: mdi:play-box-multiple
      description: These inputs are used to set the actions
      input:
        notification_scope:
          name: Notification Scope
          description: Who should be notified? It's easiest to just inform all notify devices, as this works even when customers change their mobile devices. But you can also specify specific devices. When notifying all devices (`notify.notify` action) this could also target other notify integrations such as Microsoft Teams. Still, this is the best option for most circumstances.
          selector:
            select:
              options:
                - label: All Devices
                  value: all
                - label: Specific Notify Devices
                  value: specific
          default: all
        notify_recipients:
          name: Devices to Notify (optional)
          description: If the scope is set to `specific`, which devices should be notified?
          selector:
            device:
              filter:
                - integration: mobile_app
              multiple: true
          default: []
        notification_title_rainy:
          name: Notification Title "Rainy"
          description: Set the title of the notification that should be sent on rainy weather conditions.
          selector:
            text:
          default: ‚òî Regenwarnung
        message_rainy:
          name: Message "Rainy"
          description: Set the message that should be sent on rainy weather conditions.
          selector:
            text:
              multiline: true
          default: Heute wird in deiner Umgebung Regen erwartet. Nimm sicherheitshalber einen Schirm mit!

        notification_title_pouring:
          name: Notification Title "Pouring"
          description: Set the title of the notification that should be sent on pouring weather conditions.
          selector:
            text:
          default: üåßÔ∏è Starkregenwarnung

        message_pouring:
          name: Message "Pouring"
          description: Set the message that should be sent on pouring weather conditions.
          selector:
            text:
              multiline: true
          default: Heute wird in deiner Umgebung starker Regen erwartet. Du solltest unbedingt einen Schirm mitnehmen!

        notification_title_lightning:
          name: Notification Title "Lightning" and "Lightning, Rainy"
          description: Set the title of the notification that should be sent when there is lightning.
          selector:
            text:
          default: ‚ö° Blitzwarnung

        message_lightning:
          name: Message "Lightning" and "Lightning, Rainy"
          description: Set the message that should be sent when there is lightning.
          selector:
            text:
              multiline: true
          default: In deiner Umgebung wurden Gewitter mit Blitzaktivit√§t gemeldet. Sei vorsichtig und bleibe nach M√∂glichkeit im Geb√§ude!

        notification_title_hail:
          name: Notification Title "Hail"
          description: Set the title of the notification that should be sent when it hails.
          selector:
            text:
          default: üßä Hagelschlag

        message_hail:
          name: Message "Hail"
          description: Set the message that should be sent when it hails.
          selector:
            text:
              multiline: true
          default: In deiner Umgebung wird Hagelschlag erwartet. Sch√ºtze wenn n√∂tig dein Auto und bleibe nach M√∂glichkeit im Geb√§ude!

        notification_title_snowy:
          name: Notification Title "Snowy"
          description: Set the title of the notification that should be sent when it snows.
          selector:
            text:
          default: ‚ùÑÔ∏è Schneefall

        message_snowy:
          name: Message "Snowy"
          description: Set the message that should be sent when it snows.
          selector:
            text:
              multiline: true
          default: Es wird in deiner Umgebung Schneefall erwartet. Sei vorsichtig auf den Strassen und zieh dich warm an!

        notification_title_snowy-rainy:
          name: Notification Title "Snowy, Rainy"
          description: Set the title of the notification that should be sent when there is snow and rain at the same time.
          selector:
            text:
          default: üå®Ô∏è Schneeregen

        message_snowy-rainy:
          name: Message "Snowy, Rainy"
          description: Set the message that should be sent when there is snow and rain at the same time.
          selector:
            text:
              multiline: true
          default: In deiner Umgebung wird Schneeregen erwartet. Strassen k√∂nnen rutschig sein, sei heute besonders vorsichtig!

        notification_title_fog:
          name: Notification Title "Fog"
          description: Set the title of the notification that should be sent when there is fog.
          selector:
            text:
          default: üåÅ Nebelwarnung

        message_fog:
          name: Message "Fog"
          description: Set the message that should be sent when there is fog.
          selector:
            text:
              multiline: true
          default: In deiner Umgebung wurde Nebel angek√ºndigt. Sei entsprechend vorsichtig.

    custom_inputs:
      name: "DANGER ZONE: Additional Custom Inputs"
      icon: mdi:alert
      description: >-
        **WATCH OUT!**  

        This is advanced functionality and should only be used if you know what you're doing!  


        Use this section to define custom triggers and conditions, as well as actions that will run at the end of the automation.
      collapsed: true
      input:
        custom_triggers:
          name: Custom triggers (optional)
          description: >-
            Use this to define custom triggers in addition to the default triggers.
          selector:
            trigger:
          default: []
        custom_conditions:
          name: Custom conditions (optional)
          description: >-
            Use this to define custom conditions in addition to the default conditions.
          selector:
            condition:
          default: []
        custom_actions:
          name: Custom actions (optional)
          description: >-
            Use this to define custom actions that should be executed at the end of this automation.
          selector:
            action:
          default: []

#########################
# Variables Translation #
#########################

# this is required in order to use inputs as variables within templates
variables:
  weather_entity: !input weather_entity
  weather_events: !input weather_events

  notification_scope: !input notification_scope
  notify_recipients: !input notify_recipients

  custom_actions: !input custom_actions

  # Put all messages, notification titles and icons into dictionaries that
  # can be targeted with the current weather condition.
  # This way only one notify action is required, instead of one per condition.
  messages:
    rainy: !input message_rainy
    pouring: !input message_pouring
    lightning: !input message_lightning
    lightning-rainy: !input message_lightning # take same message as for lightning
    hail: !input message_hail
    snowy: !input message_snowy
    snowy-rainy: !input message_snowy-rainy
    fog: !input message_fog
  titles:
    rainy: !input notification_title_rainy
    pouring: !input notification_title_pouring
    lightning: !input notification_title_lightning
    lightning-rainy: !input notification_title_lightning # take same title as for lightning
    hail: !input notification_title_hail
    snowy: !input notification_title_snowy
    snowy-rainy: !input notification_title_snowy-rainy
    fog: !input notification_title_fog
  icons:
    rainy: "mdi:weather-rainy"
    pouring: "mdi:weather-pouring"
    lightning: mdi:weather-lightning
    lightning-rainy: mdi:weather-lightning # take same icon as for lightning
    hail: mdi:weather-hail
    snowy: mdi:weather-snowy
    snowy-rainy: mdi:weather-snowy-rainy
    fog: mdi:weather-fog

##############
# Automation #
##############

mode: single
max_exceeded: silent

triggers:
  - trigger: time
    at: !input trigger_time
  ## Custom triggers
  - triggers: !input custom_triggers

conditions: # by default, conditions follow an AND logic
  ## Custom conditions
  - condition: and
    conditions: !input custom_conditions

actions:
  # first get the current weather forecast and write it into a variable called 'daily'
  - action: weather.get_forecasts
    target:
      entity_id: !input weather_entity
    data:
      type: daily
    response_variable: daily
  # grab that variable and extracht the forecast for the weather_entity from it.
  # then get today's (->0) condition from forecast for that entity.
  - variables:
      forecast: "{{ daily[weather_entity].forecast }}"
      forecast_today: "{{ forecast[0].condition }}"
      # add additional notify data so that they can be reused
      notify_data:
        actions:
          - action: thanks # setting an action that does nothing, but it clears the notification
            title: Danke smarli.!
          - action: "URI"
            title: "√ñffnen"
            uri: "entityId:{{weather_entity}}"

        # android-only options
        ttl: 0
        priority: high
        visibility: public
        notification_icon: "{{icons[forecast_today]}}"
        color: blue
        clickAction: noAction

        # ios-only options
        url: # used as url for iOS, nothing defined here
        data:
          push:
            interruption-level: time-sensitive
  # check if the forecast condition is part of the tracked weather_events or not
  - if:
      - condition: template
        value_template: "{{ forecast_today in weather_events }}"
    # if so, send the notification
    then:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ notification_scope == specific and notify_recipients | length > 0 }}"
            sequence:
              - repeat:
                  for_each: "{{ notify_recipients }}"
                  sequence:
                    - action: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
                      data:
                        message: "{{messages[forecast_today]}}"
                        title: "{{titles[forecast_today]}}"
                        data: "{{ notify_data }}"
        default:
          - action: notify.notify
            data:
              message: "{{messages[forecast_today]}}"
              title: "{{titles[forecast_today]}}"
              data: "{{ notify_data }}"

  ## Custom actions
  - if:
      - condition: template
        value_template: "{{custom_actions is not none }}"
    then: !input custom_actions
