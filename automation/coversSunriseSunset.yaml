#  Was soll unterstÃ¼tzt werden?
# Tag/Nacht-Steuerung (Sichtschutz)
# - Storen automatisch hoch/runter bei sonnenauf-/untergang (Sichtschutz)
# - Alternativ basierend auf Zeitplan steuern statt sonnenstand
# - alternativ basierend auf helligkeitssensor steuern (ein select input mit sonnenstand/zeitplan/helligkeit)
# WÃ¤rme-/Heiz-/Klima-Steuerung
# - Storen automatisch runter wenn Temparatur fÃ¼r die nÃ¤chste Stunde > x
# - Storen automatisch wieder runter wenn Termparatur fÃ¼r die nÃ¤chste Stunde wieder < x vorhergesagt
# - Storen automatisch runter wenn helligkeit > x
# - SToren automatisch wieder hoch wenn Helligkeit < x
# Rahmenbedingungen
# - Bei Steuerung via Sensorwerte eine VerzÃ¶gerung einbauen, dass sie nicht stÃ¤ndig wechseln, wenn z.B. eine Wolke vor der Sonne steht
# - MÃ¶glichkeit um offset und grenzwerte via helper im frontend zu setzen, ansonsten wird wert aus automatisierung genommen
# - Zeiten definieren wo Storen nicht frÃ¼her Ã¶ffnen dÃ¼rfen (z.B. nicht vor 6 Uhr auch wenn Sonne schon da)
# - spÃ¤tester Zeitpunkt wann storen aufgehen sollen, auch wenn sonne noch nicht da ist
# - Unterscheidung Wochentage/Werktage
# - selectable machen, dass Storen hoch wenn in der nÃ¤chsten Stunde Regen/Hagel/Windgeschwindigkeit>x erwartet wird -> notification wieso
# - helper auf on stellen wenn letzte Storensteuerung von dieser (oder einer) Automatisierung gekommen ist? gewisse Aktionen nur ausfÃ¼hren, wenn der Helper auf on steht oder der letzte Change >1h her ist.
# - Additional conditions unterscheidung nach Ã¶ffnen/schliessen
# - additional actions Ã¶ffnen/schliessen
# - additioanl triggers Ã¶ffnen(schliessen)

# alle gegebenen covers "auslisten" falls es gruppen hat. dann durch diese durch loopen und aktionen durchfÃ¼hren, falls z.B. eine noch manuell bewegt wurde und jetzt nicht verÃ¤ndert werden soll.

# siehe auch blueprint in sandbox: https://github.com/hvorragend/ha-blueprints/blob/main/blueprints/automation/cover_control_automation.yaml

blueprint:
  ############
  # Metadata #
  ############
  name: smarli. Cover Control Sunrise and Sunset
  description: >
    # ðŸŒž smarli. Cover Control Sunrise and Sunset

    Control covers based on the times of sunrise and sunset

    *Version 1.0.0 | 2025-04-23*

    <details>
    <summary><b>How to set it up</b></summary>

      1. Set up the required helpers:
        - input_boolean.cover_automation_tracker
      2. Here add a couple of steps that need to be followed when setting up the automation based on this blueprint.
    </details>


    All input fields are required unless they are marked as ` (optional) `.
  domain: automation
  author: loocd [smarli. AG]
  source_url: https://github.com/smarli-AG/smarli-blueprints/blob/main/automation/coversSunriseSunset.yaml
  homeassistant:
    min_version: 2024.10.0

  ###############
  # User Inputs #
  ###############
  input:
    trigger_inputs:
      name: Trigger Inputs
      icon: mdi:star-box-multiple
      description: |
        These inputs are used to set the automation triggers

      input:
        should_suspend_after_manual_interaction:
          name: Suspend After Manual Interaction (optional)
          description: If covers are controlled manually, suspend this automation for a specified amount of time (see `Suspension Duration`). This will not affect executions triggered by weather events.
          selector:
            boolean:
          default: true
        suspension_duration:
          name: Suspension Duration (optional)
          description: If suspension after manual interaction is turned on, this setting specifies how long the suspension should last.
          selector:
            duration:
          default:
            hours: 1
            minutes: 0
            seconds: 0
        was_triggered_by_automation_helper:
          name: Automation Tracker Helper (optional)
          description: Select the helper that tracks whether the automation is running or not. Only required if suspension after manual control is active.
          selector:
            entity:
              filter:
                - integration: input_boolean
          default: input_boolean.cover_automation_tracker
        is_suspension_active_helper:
          name: Suspension Tracker (optional)
          description: Select the helper that tracks whether a suspension is active or not. Only required if suspension after manual control is active.
          selector:
            entity:
              filter:
                - integration: input_boolean
          default: input_boolean.cover_automation_suspension
        lux_sensor_delay:
          name: Brightness Sensor Stabilizer (optional)
          description: How long does the brightness sensor need to be above the defined threshold before triggering the automation? This can be done to avoid frequent back-and-forth switching (e.g. if a cloud passes in front of the sun).
          selector:
            duration:
          default:
            hours: 0
            minutes: 5
            seconds: 0
        temp_sensor_delay:
          name: Temperature Sensor Stabilizer (optional)
          description: How long does the temperature sensor need to be above the defined threshold before triggering the automation? This can be done to avoid frequent back-and-forth switching (e.g. while the sensor fluctuates around the threshold).
          selector:
            duration:
          default:
            hours: 0
            minutes: 5
            seconds: 0
        day_night_cycle_method:
          name: Day-Night Cycle Method
          description: Based on which method should the day-night cycle (opening covers in the morning, closing them at night) operate?
          selector:
            select:
              options:
                - label: Sunrise/Sunset
                  value: sun
                - label: Time
                  value: time
                - label: Brightness
                  value: brightness
                - label: Disable Day-Night Cycle
                  value: disabled
          default: sun
        daynight_sunrise_offset:
          name: Sunrise Delay (minutes)
          description: Delay after sunrise to open covers.
          default: 0
          selector:
            number:
              min: -999
              max: 999
              unit_of_measurement: minutes
              mode: box

        daynight_sunrise_offset_helper:
          name: Sunrise Delay Helper
          description: Helper entity to override the sunrise delay.
          default: ""
          selector:
            entity:
              domain: input_number

        daynight_sunset_offset:
          name: Sunset Delay (minutes)
          description: Delay after sunset to close covers.
          default: 0
          selector:
            number:
              min: -999
              max: 999
              unit_of_measurement: minutes
              mode: box

        daynight_sunset_offset_helper:
          name: Sunset Delay Helper
          description: Helper entity to override the sunset delay.
          default: ""
          selector:
            entity:
              domain: input_number

        daynight_time_open:
          name: Open Time
          description: Time to open covers.
          default: "07:00:00"
          selector:
            time:

        daynight_time_open_helper:
          name: Open Time Helper
          description: Helper entity to override the open time.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_time_close:
          name: Close Time
          description: Time to close covers.
          default: "22:00:00"
          selector:
            time:

        daynight_time_close_helper:
          name: Close Time Helper
          description: Helper entity to override the close time.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_brightness_open:
          name: Brightness to Open (lux)
          description: Brightness level to open covers.
          default: 300
          selector:
            number:
              min: 0
              max: 100000
              unit_of_measurement: lux

        daynight_brightness_open_helper:
          name: Brightness Open Helper
          description: Helper entity to override the brightness to open.
          default: ""
          selector:
            entity:
              domain: input_number

        daynight_brightness_close:
          name: Brightness to Close (lux)
          description: Brightness level to close covers.
          default: 10
          selector:
            number:
              min: 0
              max: 100000
              unit_of_measurement: lux
              mode: box

        daynight_brightness_close_helper:
          name: Brightness Close Helper
          description: Helper entity to override the brightness to close.
          default: ""
          selector:
            entity:
              domain: input_number

        daynight_brightness_sensor:
          name: Brightness Sensor
          description: Brightness sensor entity.
          selector:
            entity:
              domain: sensor
              device_class: illuminance

        daynight_should_use_latest_open:

        daynight_latest_open_workday:
          name: Latest Open Time (Workday)
          description: Latest time to open covers on workdays.
          default: "09:00:00"
          selector:
            time:

        daynight_latest_open_workday_helper:
          name: Latest Open Time Workday Helper
          description: Helper entity to override the latest open time on workdays.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_latest_close_workday_tomorrow:
          name: Latest Close Time (Workday)
          description: Latest time to close covers on workdays.
          default: "23:00:00"
          selector:
            time:

        daynight_latest_close_workday_tomorrow_helper:
          name: Latest Close Time Workday Helper
          description: Helper entity to override the latest close time on workdays.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_latest_open_non_workday:
          name: Latest Open Time (Non-Workday)
          description: Latest time to open covers on non-workdays.
          default: "10:00:00"
          selector:
            time:

        daynight_latest_open_non_workday_helper:
          name: Latest Open Time Non-Workday Helper
          description: Helper entity to override the latest open time on non-workdays.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_latest_close_non_workday_tomorrow:
          name: Latest Close Time (Non-Workday)
          description: Latest time to close covers on non-workdays.
          default: "23:00:00"
          selector:
            time:

        daynight_latest_close_non_workday_tomorrow_helper:
          name: Latest Close Time Non-Workday Helper
          description: Helper entity to override the latest close time on non-workdays.
          default: ""
          selector:
            entity:
              domain: input_datetime

        daynight_differentiate_workdays:
          name: Differentiate Workdays
          description: Differentiate between workdays and non-workdays.
          selector:
            boolean:

        climate_temp_close:
          name: Temperature to Close (Â°C)
          description: Temperature threshold to close covers.
          default: 25
          selector:
            number:
              min: -50
              max: 100
              unit_of_measurement: Â°C

        climate_temp_close_helper:
          name: Temperature Close Helper
          description: Helper entity to override the temperature to close.
          default: ""
          selector:
            entity:
              domain: input_number

        climate_temp_open:
          name: Temperature to Open (Â°C)
          description: Temperature threshold to open covers.
          default: 20
          selector:
            number:
              min: -50
              max: 100
              unit_of_measurement: Â°C

        climate_temp_open_helper:
          name: Temperature Open Helper
          description: Helper entity to override the temperature to open.
          default: ""
          selector:
            entity:
              domain: input_number

        climate_temp_sensor:
          name: Temperature Sensor
          description: Temperature sensor entity.
          selector:
            entity:
              domain: sensor
              device_class: temperature

        climate_brightness_sensor:
          name: Brightness Sensor
          description: Brightness sensor entity.
          selector:
            entity:
              domain: sensor
              device_class: illuminance

        climate_brightness_close:
          name: Brightness to Close (lux)
          description: Brightness level to close covers.
          default: 500
          selector:
            number:
              min: 0
              max: 100000
              unit_of_measurement: lux

        climate_brightness_close_helper:
          name: Brightness Close Helper
          description: Helper entity to override the brightness to close.
          default: ""
          selector:
            entity:
              domain: input_number

        climate_brightness_open:
          name: Brightness to Open (lux)
          description: Brightness level to open covers.
          default: 100
          selector:
            number:
              min: 0
              max: 100000
              unit_of_measurement: lux

        climate_brightness_open_helper:
          name: Brightness Open Helper
          description: Helper entity to override the brightness to open.
          default: ""
          selector:
            entity:
              domain: input_number

        weather_events:
          name: Weather Events
          description: Select weather events to open covers.
          selector:
            select:
              multiple: true
              options:
                - label: Hail
                  value: hail
                - label: Rain
                  value: rain
                - label: Wind
                  value: wind

        wind_speed_threshold:
          name: Wind Speed Threshold (m/s)
          description: Wind speed threshold to open covers.
          default: 10
          selector:
            number:
              min: 0
              max: 100
              unit_of_measurement: m/s

        wind_speed_threshold_helper:
          name: Wind Speed Threshold Helper
          description: Helper entity to override the wind speed threshold.
          default: ""
          selector:
            entity:
              domain: input_number

        weather_sensor:
          name: Weather Sensor
          description: Weather sensor entity.
          selector:
            entity:
              domain: weather

    condition_inputs:
      name: Condition Inputs
      icon: mdi:help-box-multiple
      description: These inputs are used to set the automation conditions
      input:
        time_from:
          name: Automation Start Time
          description: Time from which the automation is allowed to run.
          default: "00:00:00"
          selector:
            time:

        time_from_helper:
          name: Automation Start Time Helper
          description: Helper entity to override the automation start time.
          default: ""
          selector:
            entity:
              domain: input_datetime

        time_to:
          name: Automation End Time
          description: Time until which the automation is allowed to run.
          default: "23:59:59"
          selector:
            time:

        time_to_helper:
          name: Automation End Time Helper
          description: Helper entity to override the automation end time.
          default: ""
          selector:
            entity:
              domain: input_datetime

    action_inputs:
      name: Action Inputs
      icon: mdi:play-box-multiple
      description: These inputs are used to set the actions
      input:
        cover_entity:
          name: Cover
          description: The cover entity to automate.
          selector:
            entity:
              domain: cover

        manual_interaction_helper:
          name: Manual Interaction Helper
          description: Helper entity to track manual interactions.
          default: input_boolean.manual_interaction
          selector:
            entity:
              domain: input_boolean

        manual_interaction_timer:
          name: Manual Interaction Timer
          description: Timer to pause climate actions after manual interaction.
          default: timer.manual_interaction_pause
          selector:
            entity:
              domain: timer

variables:
  day_night_cycle_method: !input day_night_cycle_method
  daynight_sunrise_offset: >
    {% if daynight_sunrise_offset_helper != "" %}
      {{ states(daynight_sunrise_offset_helper) | int }}
    {% else %}
      {{ daynight_sunrise_offset }}
    {% endif %}
  daynight_sunset_offset: >
    {% if daynight_sunset_offset_helper != "" %}
      {{ states(daynight_sunset_offset_helper) | int }}
    {% else %}
      {{ daynight_sunset_offset }}
    {% endif %}
  daynight_time_open: >
    {% if daynight_time_open_helper != "" %}
      {{ states(daynight_time_open_helper) }}
    {% else %}
      {{ daynight_time_open }}
    {% endif %}
  daynight_time_close: >
    {% if daynight_time_close_helper != "" %}
      {{ states(daynight_time_close_helper) }}
    {% else %}
      {{ daynight_time_close }}
    {% endif %}
  daynight_brightness_open: >
    {% if daynight_brightness_open_helper != "" %}
      {{ states(daynight_brightness_open_helper) | int }}
    {% else %}
      {{ daynight_brightness_open }}
    {% endif %}
  daynight_brightness_close: >
    {% if daynight_brightness_close_helper != "" %}
      {{ states(daynight_brightness_close_helper) | int }}
    {% else %}
      {{ daynight_brightness_close }}
    {% endif %}
  daynight_brightness_sensor: !input daynight_brightness_sensor
  daynight_latest_open_workday: >
    {% if daynight_latest_open_workday_helper != "" %}
      {{ states(daynight_latest_open_workday_helper) }}
    {% else %}
      {{ daynight_latest_open_workday }}
    {% endif %}
  daynight_latest_close_workday_tomorrow: >
    {% if daynight_latest_close_workday_tomorrow_helper != "" %}
      {{ states(daynight_latest_close_workday_tomorrow_helper) }}
    {% else %}
      {{ daynight_latest_close_workday_tomorrow }}
    {% endif %}
  daynight_latest_open_non_workday: >
    {% if daynight_latest_open_non_workday_helper != "" %}
      {{ states(daynight_latest_open_non_workday_helper) }}
    {% else %}
      {{ daynight_latest_open_non_workday }}
    {% endif %}
  daynight_latest_close_non_workday_tomorrow: >
    {% if daynight_latest_close_non_workday_tomorrow_helper != "" %}
      {{ states(daynight_latest_close_non_workday_tomorrow_helper) }}
    {% else %}
      {{ daynight_latest_close_non_workday_tomorrow }}
    {% endif %}
  daynight_differentiate_workdays: !input daynight_differentiate_workdays
  time_from: >
    {% if time_from_helper != "" %}
      {{ states(time_from_helper) }}
    {% else %}
      {{ time_from }}
    {% endif %}
  time_to: >
    {% if time_to_helper != "" %}
      {{ states(time_to_helper) }}
    {% else %}
      {{ time_to }}
    {% endif %}
  climate_brightness_sensor: !input climate_brightness_sensor
  climate_temp_close: >
    {% if climate_temp_close_helper != "" %}
      {{ states(climate_temp_close_helper) | float }}
    {% else %}
      {{ climate_temp_close }}
    {% endif %}
  climate_temp_open: >
    {% if climate_temp_open_helper != "" %}
      {{ states(climate_temp_open_helper) | float }}
    {% else %}
      {{ climate_temp_open }}
    {% endif %}
  climate_temp_sensor: !input climate_temp_sensor
  climate_brightness_close: >
    {% if climate_brightness_close_helper != "" %}
      {{ states(climate_brightness_close_helper) | int }}
    {% else %}
      {{ climate_brightness_close }}
    {% endif %}
  climate_brightness_open: >
    {% if climate_brightness_open_helper != "" %}
      {{ states(climate_brightness_open_helper) | int }}
    {% else %}
      {{ climate_brightness_open }}
    {% endif %}
  weather_events: !input weather_events
  wind_speed_threshold: >
    {% if wind_speed_threshold_helper != "" %}
      {{ states(wind_speed_threshold_helper) | float }}
    {% else %}
      {{ wind_speed_threshold }}
    {% endif %}
  weather_sensor: !input weather_sensor
  manual_interaction_helper: !input manual_interaction_helper
  manual_interaction_timer: !input manual_interaction_timer

trigger:
  - platform: time
    at: "{{ daynight_time_open }}"
    id: daynight_time_open
  - platform: time
    at: "{{ daynight_time_close }}"
    id: daynight_time_close
  - platform: sun
    event: sunrise
    offset: "{{ daynight_sunrise_offset }}"
    id: sun_open
  - platform: sun
    event: sunset
    offset: "{{ daynight_sunset_offset }}"
    id: sun_close
  - platform: numeric_state
    entity_id: !input daynight_brightness_sensor
    above: "{{ daynight_brightness_open }}"
    id: daynight_brightness_open
  - platform: numeric_state
    entity_id: !input daynight_brightness_sensor
    below: "{{ daynight_brightness_close }}"
    id: daynight_brightness_close
  - platform: time
    at: "{{ daynight_latest_open_workday }}"
    id: daynight_latest_open_workday
  - platform: time
    at: "{{ daynight_latest_close_workday_tomorrow }}"
    id: daynight_latest_close_workday_tomorrow
  - platform: time
    at: "{{ daynight_latest_open_non_workday }}"
    id: daynight_latest_open_non_workday
  - platform: time
    at: "{{ daynight_latest_close_non_workday_tomorrow }}"
    id: daynight_latest_close_non_workday_tomorrow
  - platform: numeric_state
    entity_id: !input climate_temp_sensor
    above: "{{ climate_temp_close }}"
    id: climate_temp_close
  - platform: numeric_state
    entity_id: !input climate_temp_sensor
    below: "{{ climate_temp_open }}"
    id: climate_temp_open
  - platform: numeric_state
    entity_id: !input climate_brightness_sensor
    above: "{{ climate_brightness_close }}"
    id: climate_brightness_close
  - platform: numeric_state
    entity_id: !input climate_brightness_sensor
    below: "{{ climate_brightness_open }}"
    id: climate_brightness_open
  - platform: state
    entity_id: !input weather_sensor
    to: "hail"
    id: weather_hail
  - platform: state
    entity_id: !input weather_sensor
    to: "rainy"
    id: weather_rain
  - platform: numeric_state
    entity_id: !input weather_sensor
    attribute: wind_speed
    above: "{{ wind_speed_threshold }}"
    id: weather_wind
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input cover_entity
    id: manual_interaction

condition:
  - condition: time
    after: "{{ time_from }}"
    before: "{{ time_to }}"
  - condition: template
    value_template: "{{ not is_state(manual_interaction_timer, 'active') }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ day_night_cycle_method == 'sun' }}"
          - condition: or
            conditions:
              - condition: trigger
                id: sun_open
              - condition: trigger
                id: sun_close
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: template
            value_template: "{{ day_night_cycle_method == 'time' }}"
          - condition: or
            conditions:
              - condition: trigger
                id: daynight_time_open
              - condition: trigger
                id: daynight_time_close
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: template
            value_template: "{{ day_night_cycle_method == 'brightness' }}"
          - condition: or
            conditions:
              - condition: trigger
                id: daynight_brightness_open
              - condition: trigger
                id: daynight_brightness_close
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: template
            value_template: "{{ daynight_differentiate_workdays }}"
          - condition: or
            conditions:
              - condition: trigger
                id: daynight_latest_open_workday
              - condition: trigger
                id: daynight_latest_close_workday_tomorrow
              - condition: trigger
                id: daynight_latest_open_non_workday
              - condition: trigger
                id: daynight_latest_close_non_workday_tomorrow
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: climate_temp_close
              - condition: trigger
                id: climate_temp_open
              - condition: trigger
                id: climate_brightness_close
              - condition: trigger
                id: climate_brightness_open
        sequence:
          - service: cover.close_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: weather_hail
              - condition: trigger
                id: weather_rain
              - condition: trigger
                id: weather_wind
        sequence:
          - service: cover.open_cover
            target:
              entity_id: !input cover_entity
            data: {}

      - conditions:
          - condition: template
            value_template: "{{ trigger.event.origin == 'LOCAL' }}"
          - condition: trigger
            id: manual_interaction
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input manual_interaction_helper
            data: {}
          - service: timer.start
            target:
              entity_id: !input manual_interaction_timer
            data:
              duration: "01:00:00"
          - wait_template: "{{ is_state(manual_interaction_timer, 'active') }}"
            timeout: "01:00:00"
          - service: input_boolean.turn_off
            target:
              entity_id: !input manual_interaction_helper
            data: {}

mode: single
